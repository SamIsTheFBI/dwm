/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const char *fonts[]          = {"fontawesome:size=10:antialias=true:autohint=true","NotoSans-Regular:size=10","SourceHanSansJP-Normal:size=10", "JetBrains Mono:size=10" };    //{"JetBrains Mono:size=10", "fontawesome:size=10:antialias=true:autohint=true"};
static const char dmenufont[]       = "JetBrains Mono:size=10";   //"NotoSans-Regular:size=10"
static const char norm_bg[]         = "#222222";
static const char norm_border[]     = "#444444";
static const char norm_fg[]         = "#bbbbbb";
static const char sel_fg[]          = "#eeeeee";
static const char sel_border[]      = "#f56642";
static const char sel_bg[]          = "#d45839";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { norm_fg,   norm_bg,   norm_border},
	[SchemeSel]  = { sel_fg,    sel_bg,    sel_border},
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", };
//static const char *tags[] = { "", "", "", "", "",};

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class	instance	title	tags mask	isfloating	monitor */
	//{ "st",		NULL,       	NULL,   1 << 0,            	0,           	-1 },
	//{ "chromium",  	NULL,       	NULL,   1 << 1,       	0,           	-1 },
};

/* layout(s) */
static const float mfact     = 0.5; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1; /* 1 will force focus on the fullscreen window */

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "[Tiling]",      tile },    /* first entry is default */
	{ "[Floating]",      NULL },    /* no layout function means floating behavior */
	{ "[Monocle]",      monocle },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[]       = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", norm_bg, "-nf", norm_fg, "-sb", sel_border, "-sf", sel_fg, NULL };
static const char *termcmd[]        = { "st",                NULL };
static const char *sysact[]         = { "sysact",            NULL };
static const char *browsercmd[]     = { "chromium",          NULL };
//static const char *processview[]    = { "htop",              NULL };
static const char *chatapp[]        = { "telegram-desktop",  NULL};

#include <X11/XF86keysym.h>

static Key keys[] = {
        /* ============================================================================== */
	/* modifier                     key        function                 argument */
        /* ============================================================================== */

        /* ============================================================================== */
	/* App Launching  */
        /* ============================================================================== */

	{MODKEY,                       XK_p,      spawn,                    {.v = dmenucmd } },
	{MODKEY|ShiftMask,             XK_Return, spawn,                    {.v = termcmd } },
	{MODKEY|ShiftMask,             XK_w,      spawn,                    {.v = browsercmd} },
	{MODKEY|ShiftMask,             XK_m,      spawn,                    {.v = chatapp} },
	//{MODKEY|ShiftMask,             XK_h,      spawn,                    {.v = processview} },

        /* ============================================================================== */
	/* Window Management ig */
        /* ============================================================================== */

	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_Left,   focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_Right,  focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
	{ MODKEY,             XK_f,      togglefullscr,  {0} },
	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY,                       XK_y,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY,                       XK_u,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ 0,             XK_F5,      quit,           {0} },
	{ MODKEY,                       XK_x,    spawn,            SHCMD("~/scripts/sysact")},
 
	/* ============================================================================== */
	/* Xf86 Keys, mostly - Change Brightness, Audio, take screenshot */
        /* ============================================================================== */

	{0, XF86XK_AudioMute,   spawn,       SHCMD("pamixer -t;")},
	{0, XF86XK_AudioRaiseVolume, spawn,  SHCMD("pamixer --allow-boost -i 3")},
	{0, XF86XK_AudioLowerVolume, spawn,  SHCMD("pamixer --allow-boost -d 3")},
	{0, XF86XK_MonBrightnessUp,  spawn,  SHCMD("brightnessctl s 5%+")},
	{0, XF86XK_MonBrightnessDown, spawn, SHCMD("brightnessctl s 5%-")},
	{0, XK_Print, spawn, SHCMD("~/scripts/screenshot.sh")}
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};

